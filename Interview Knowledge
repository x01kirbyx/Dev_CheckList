# Dev_CheckList

* **This is a list of Infomation that may be asked in an interview to become a full-stack web developer.**

---------------------------------------------------------------------
-------> FRONT-END Development <-------------------------------------
---------------------------------------------------------------------

* **Front-End web development is the portion of an application the user will see or interact with.**
---------------------------------------------------------------------
--------> HTML & CSS (HTML5-CSS3) <---------------------------------- 
---------------------------------------------------------------------
**(H)yper (T)ext (M)arkup (L)anguage & (C)ascading (S)tyle (S)heet**

* **Semantic HTML (Semantic Element)** - Semantic is the meaning of words and phrases. But in this context is refers to elements
  that describe its meaning to the browser and developer. using semantic tags benefits us as it builds us a better structured                               website aswell as improving accessibility. examples of non-semantic tags could be \<div> or \<span> as both of these tell us    nothing about its content. Example of Semantic elements could be \<form>, \<table> and \<article> as these Clearly define its  content.

* **CSS box model** - All elements that are displayed on a browser have invisible boxes that surround it. The Content box is the center (Middle) of these boxes. Followed by padding then border then Margin. Box models allow us to add borders around elements and define the space between elements. 
1. **Content** - This is where text or images will be displayed.
2. **Padding** - This is the Invisible space between the content and the border.
3. **Border** -  This is the border that goes around the exterior of the padding/content.
4. **Margain** - This is the invisible space after the border. 


* **CSS Media Queries** - This is used to define different style rules for different media types and devices. Media Queries find the capabilitys of the device such as the width and height of the device, orientation, resolution and alot more and change it accordingly.

* **Using Frameworks to build code (Bootstrap, Foundation)** - This is an application framework that Assists you working on HTML, CSS and Javascript code with pre-made code, Libaries, and methods to better organize. 
---------------------------------------------------------------------
--------> Javascript <-----------------------------------------------
---------------------------------------------------------------------
* **JavaScript is a programming language that allows you to add complex things onto the web pages. This could be displaying timely content updates, interactive maps or animated 2D/3D graphics etc. Javascript is the only language that runs on the browser, and can double up as a server side language.**

* **Working with DOMS (D)ocument (O)bject (M)odel.** When a web page is loaded, the browser creates a Document Object Model of the page.

* **Working with JSON (J)ava(S)cript (O)bject (N)otation.** JSON is an independant language for storing and exchanging data. for example converting JavaScript objects into JSON and sending it to the server. Or retrieving the objects from the server and converting it into JavaScript.

* **Working with functional compositions.** This is the process of combining two or more functions to produce a new function. This makes workflow more efficiant.  

* **Working with prototypal inheritance.**

* **Working with closures.**

* **Working with event delegations.**

* **Working with scopes.**

* **Working with higher-order functions.** 

* **Working with Asynchronous control flows.**

promises, and callbacks.

* **How to properly structure your code and modularize parts of it.** 

* **Javascript frameworks.**

* **Javascript Libary.**

* **Working with JQuery.**

* **latest Javascript feactures (ES6)

------------------------------------------------
--------> BACK-END Development <----------------
------------------------------------------------
This handle's Database Operations, User authentication and application logic.
!* Understanding of a Framework (Node.js, PHP, Python, Java, Ruby,)
* Unerstand the benefits of relational data (SQL)
* No SQL dataBases
* What is better in certain Situations.
* Understand the benefits of in-memory data stores (Redis or Memcached)
* Web storage to store sessions, cookies, and cached data.
* scailing databases (ACID or ORM)
-----------------------------------
--------> HTTP(s) & REST <---------
-----------------------------------
(H)yper(t)ext (T)ransfer (P)rotocol (S)ecure
(R)epresentational (S)tate (T)ransfer
HTTP is a stateless application protocol on the Internet — it’s what allows clients to communicate with servers (e.g. your JavaScript code can make an AJAX request to some back-end code you have running on a server which will happen via HTTP).
What is Rest & why is it important in regards to HTTP Protocol and web apps.
Best Practices for Designing a RESTful API. POST/GET requests.
What are SSL Certificates.
HTTP/2 & SPDY
WebSockets, Web Workers, and Service Workers.
-------------------------------------------------------
--------> Web Application Architecture <---------------
-------------------------------------------------------
This is how to structure your code, seperate your files, 
where to host your large media files, how to structure the data
in your database, where to perform certain computational tasks (client vs servers-side)
learn common platforms as a service (Heroku and AWS)
Heroku allows you to easily upload your code and have an application up
and running with very little configuration or server maintenance and AWS offers
dozens of products and services to help with storage, video processing, load balancing.
* Performance Optimization
* What WAA should include
* desigining web applications by microsoft
* MVC
* Work with people on GitHub and learn.
---------------------------------------------------------------
--------> Git <------------------------------------------------
---------------------------------------------------------------
Git is a version control system that allows developers working in
a team to keep track of all the changes being made to a database.
* Understand some common git commands. 
---------------------------------------------------------------
--------> Algorithms & Data Structures <-----------------------
---------------------------------------------------------------
* Study Hash Tables.
* How can trees and graphs be beneficial as data structures.
* understand the basics of Big-O analysis.
* when to use an object vs an array.
* Why caching is so important when working with large ammounts of data
* Pros and cons of in-memory vs disk storage.
* Difference between queues and stacks. 
---------------------------------------------------------------



